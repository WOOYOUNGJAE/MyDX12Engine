#pragma once

namespace Engine
{
	// OBJ_LAYER
	enum OBJ_LAYER { OBJ_LAYER_DEFAULT, OBJ_LAYER_0, OBJ_LAYER_END};

	namespace Pipeline
	{
		enum ENUM_PSO { PSO_DEFAULT, PSO_END };
	}

	//PSO TYPES
	enum RENDER_CULLMODE
	{
		NONE = D3D12_CULL_MODE_NONE - 1,
		CW = D3D12_CULL_MODE_FRONT - 1, // CW를 컬링
		CCW = D3D12_CULL_MODE_BACK - 1, // CCW를 컬링
		D3D12_CULL_MODE_END = CCW + 1
	};
	enum RENDER_PRIORITY {RENDER_FIRST, RENDER_AFTER, RENDER_LAST, RENDER_PRIORITY_END};
	enum RENDER_BLENDMODE { NOBLEND, BLEND, RENDER_BLENDMODE_END};
	enum RENDER_SHADERTYPE
	{						// InputLayout 
		SHADERTYPE_SIMPLE,	// Pos, Color
		SHADERTYPE_SIMPLE2, // Pos, TexCoord, Normal
		SHADERTYPE_SIMPLE3, // Simple2 + Light, Material
		SHADERTYPE_TREEBILLBOARD,
		SHADERTYPE_SKYBOX,
		RENDER_SHADERTYPE_END
	};
	enum ROOTSIG_TYPE { ROOTSIG_DEFAULT, /*ROOTSIG_TEX, ROOTSIG_TEX_TRANSMAT,*/ ROOTSIG_TYPE_END};
	//enum RENDER_PARAMCOMBO {PARAM_SIMPLE, PARAM_SAMPLER, RENDER_PARAMCOMBO_END};

	// RootSignature DescriptorTable
	enum TABLE_TYPE {TEX, TEX_CB, TABLE_TYPE_END};

	enum MANAGED_RESOURCE_TYPE : unsigned long long
	{ MANAGED_RESOURCE_TEX, MANAGED_RESOURCE_OBJ_CONS, MANAGED_RESOURCE_TYPE_END};

	enum DXR_ROOTSIG_TYPE {DXR_ROOTSIG_LOCAL, DXR_ROOTSIG_GLOBAL, DXR_ROOTSIG_TYPE_END};

	enum SDS_TREE_TYPE {SDS_AS, SDS_TREE_TYPE_END};

#if DXR_ON
	namespace GlobalRootSigSlot
	{
		enum SLOT_INDEX {OUTPUT_VIEW, AS, SCENE_CONSTANT, IB_VB_SRV};
		
	}
#endif

}